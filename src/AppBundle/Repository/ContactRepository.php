<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ContactRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContactRepository extends \Doctrine\ORM\EntityRepository {

    /**
     * Get all contacts for contact list in the back section
     * @param integer $currentPage The current page (passed from controller)
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function getLastContactAdded($currentPage = 1, $limit) {
        // 
        $query = $this->createQueryBuilder('u')
                ->orderBy('u.id', 'DESC')
                ->getQuery();
        $paginator = $this->paginate($query, $currentPage, $limit);

        return $paginator;
    }

    public function takeIp($id, $origin = 'contact') {
        if ($origin === 'contact') {
            $sql = "SELECT ip FROM ip WHERE contact_id = :contact_id";
            $params = ['contact_id' => $id];
        } else if ($origin === 'post') {
            $sql = "SELECT ip FROM ip WHERE post_id = :post_id";
            $params = ['post_id' => $id];
        } else if ($origin === 'comment') {
            $sql = "SELECT ip FROM ip WHERE comment_id = :comment_id";
            $params = ['comment_id' => $id];
        }

        $em = $this->getEntityManager();
        $stmt = $em->getConnection()->prepare($sql);
        $status = $stmt->execute($params);
        if ($status) {
            $user_ip = $stmt->fetch();
        }
        return $user_ip;
    }

    public function checkIp($ip) {
        $sql = "SELECT ip, banned FROM bannedd_ip WHERE ip = :ip AND banned = 1";
        $params = ['ip' => $ip];
        $em = $this->getEntityManager();
        $stmt = $em->getConnection()->prepare($sql);
        $status = $stmt->execute($params);
        if ($status) {
            $row = $stmt->fetch();
        } else {
            $row = 'Empty';
        }
        return $row;
    }

    public function writeIps($ip, $client_ip, $proxy, $x_id, $origin) {
        if ($origin === 'contact') {
            $sql = "INSERT INTO ip (ip, client_ip, contact_id,  proxy, created) VALUES (
                :ip, :client_ip, :contact_id,  :proxy, NOW())";
            $params = [
                'ip' => $ip,
                'proxy' => $proxy,
                'contact_id' => $x_id,
                'client_ip' => $client_ip
            ];
        } else if ($origin === 'post') {
            $sql = "INSERT INTO ip (ip, client_ip, post_id,  proxy, created) VALUES (
                :ip, :client_ip, :post_id,  :proxy, NOW())";
            $params = [
                'ip' => $ip,
                'proxy' => $proxy,
                'post_id' => $x_id,
                'client_ip' => $client_ip
            ];
        } else if ($origin === 'comment') {
            $sql = "INSERT INTO ip (ip, client_ip, comment_id, proxy, created) VALUES (
                :ip, :client_ip, :comment_id,  :proxy, NOW())";
            $params = [
                'ip' => $ip,
                'proxy' => $proxy,
                'comment_id' => $x_id,
                'client_ip' => $client_ip
            ];
        }
        $em = $this->getEntityManager();
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute($params);
    }

    /**
     *
     *   
     * @param integer            $page  
     * @param integer            $limit 
     *
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function paginate($dql, $page = 1, $limit = 10) {
        $paginator = new Paginator($dql);
        $paginator->setUseOutputWalkers(false);

        $paginator->getQuery()
                ->setFirstResult($limit * ($page - 1))
                ->setMaxResults($limit); // Limit

        return $paginator;
    }

    public function getContactsLastTen() {
        return $this->getEntityManager()
                        ->createQuery(
                                'SELECT u.id, u.author, u.created, u.email, u.body FROM AppBundle:Contact u ORDER BY u.id DESC'
                        )->setMaxResults(15)
                        ->getResult();
    }

    public function backup() {
        $sql = "SELECT * INTO OUTFILE '/tmp/result.txt'
        FIELDS TERMINATED BY ','
        LINES TERMINATED BY '\n'
        FROM bannedd_ip;";
        $em = $this->getEntityManager();
        $stmt = $em->getConnection()->query($sql);
        //$stmt->execute($params);
    }

}
