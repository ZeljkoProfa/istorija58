<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
    public function getLastAdded() {
        return $this->getEntityManager()
                ->createQuery(
                        'SELECT u.id, u.title, u.author, u.created, u.body FROM AppBundle:Post u WHERE u.status = 1 ORDER BY u.id DESC'
                )->setMaxResults(10)
                ->getResult();
    }

    public function getLastAddedBack($limit, $currentPage = 1)
    {
        $query = $this->createQueryBuilder('u')
                ->orderBy('u.id', 'DESC')
                ->getQuery();
        $paginator = $this->paginate($query, $currentPage, $limit);

        return $paginator;
    }

    public function getLastPpp()
    {
        return $this->getEntityManager()
                ->createQuery(
                        "SELECT u.title, u.author, u.created, u.body FROM AppBundle:Post u WHERE u.category = '2' AND u.status = 1 ORDER BY u.id DESC"
                )->setMaxResults(10)
                ->getResult();
    }

    public function getByCategory()
    {
        return $query = $this->getEntityManager()
                ->createQuery( /** @lang mysql */
                        "SELECT u.title, u.author, u.created, u.body FROM AppBundle:Post u WHERE u.category = '1' AND u.status = 1 ORDER BY u.id DESC"
                )->getResult();
    }

    public function getForPagesByCategory($id, $limit, $currentPage = 1)
    {
        $query = $this->createQueryBuilder('u')
                        ->where('u.category = :id', 'u.status = 1')
                        ->setParameter('id', $id)
                        ->orderBy('u.id', 'DESC')
                        ->getQuery();
        $paginator = $this->paginate($query, $currentPage, $limit);

        return $paginator;
    }

    public function searchSite($string, $currentPage = 1)
    {
        // Getting all records from post by category. Returns array.
        $query = $this->createQueryBuilder('u')
                ->where('u.status = 1', 'u.seoTitle LIKE :string OR u.title LIKE :string')
                ->setParameter('string', '%' . $string . '%')
                ->orderBy('u.id', 'DESC')
                ->getQuery();
        $paginator = $this->paginate($query, $currentPage);

        return $paginator;
    }

    public function searchSiteBack($string, $currentPage = 1)
    {
        $query = $this->createQueryBuilder('u')
                ->where('u.seoTitle LIKE :string OR u.title LIKE :string')
                ->setParameter('string', '%' . $string . '%')
                ->orderBy('u.id', 'DESC')
                ->getQuery();
        $paginator = $this->paginate($query, $currentPage);

        return $paginator;
    }

    public function paginate($dql, $page = 1, $limit = 10)
    {
        $paginator = new Paginator($dql);
        $paginator->setUseOutputWalkers(false);
//dump($limit * ($page - 1));die;
        $offset = abs($limit * ($page - 1));
        $paginator->getQuery()
                ->setFirstResult($offset)
                ->setMaxResults($limit); // Limit

        return $paginator;
    }

    public function getPostsByCategoryBack($id, $limit, $currentPage = 1)
    {
        $query = $this->createQueryBuilder('u')
                        ->where('u.category = :id')
                        ->setParameter('id', $id)
                        ->orderBy('u.id', 'DESC')
                        ->getQuery();
        $paginator = $this->paginate($query, $currentPage, $limit);

        return $paginator;
    }
}
