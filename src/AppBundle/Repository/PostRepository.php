<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Post;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository {
    
    // Show last added for 'naslovna' page.
    public function getLastAdded() {
        // Getting last ten records from post. Returns array.
        return $this->getEntityManager()
                        ->createQuery(
                                'SELECT u.id, u.title, u.author, u.created, u.body FROM AppBundle:Post u WHERE u.status = 1 ORDER BY u.id DESC'
                        )->setMaxResults(10)
                        ->getResult();
    }
    
    /**
     * Get all posts for homepage in the back section
     * @param integer $currentPage The current page (passed from controller)
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function getLastAddedBack($currentPage = 1, $limit) {
        // 
        $query = $this->createQueryBuilder('u')
                        ->orderBy('u.id', 'DESC')
                        ->getQuery();
        $paginator = $this->paginate($query, $currentPage, $limit);

        return $paginator;
    }
    
    // Getting last ten PowerPoint records from post. Returns array. Show in front/sidebar.
    public function getLastPpp() {
        
        return $this->getEntityManager()
                        ->createQuery(
                                "SELECT u.title, u.author, u.created, u.body FROM AppBundle:Post u WHERE u.category = '2' AND u.status = 1 ORDER BY u.id DESC"
                        )->setMaxResults(10)
                        ->getResult();
    }

    /**
     * @param integer $currentPage The current page (passed from controller)
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function getByCategory() {
        // Getting last ten tests record from post. Returns array.
        return $query = $this->getEntityManager()
                        ->createQuery(
                                "SELECT u.title, u.author, u.created, u.body FROM AppBundle:Post u WHERE u.category = '1' AND u.status = 1 ORDER BY u.id DESC"
                        )->getResult();


    }

    /**
     * Get posts by category for front/content-pages
     * @param integer $currentPage The current page (passed from controller)
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function getForPagesByCategory($id, $currentPage = 1, $limit) {
        // Getting all records from post by category. Returns array.
        //$repository = $this->getRepository(Post::class);
        $query = $this->createQueryBuilder('u')
                        ->where('u.category = :id', 'u.status = 1')
                        ->setParameter('id', $id)
                        ->orderBy('u.id', 'DESC')
                        ->getQuery();
        $paginator = $this->paginate($query, $currentPage, $limit);

        return $paginator;
    }

    /**
     * Get selected for search
     * @param integer $currentPage The current page (passed from controller)
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function searchSite($string, $currentPage = 1, $limit) {
        // Getting all records from post by category. Returns array.
        $query = $this->createQueryBuilder('u')
                ->where('u.status = 1', 'u.seoTitle LIKE :string OR u.title LIKE :string')
                ->setParameter('string', '%' . $string . '%')
                ->orderBy('u.id', 'DESC')
                ->getQuery();
        $paginator = $this->paginate($query, $currentPage);

        return $paginator;
    }
    
    /**
     * Get selected for search
     * @param integer $currentPage The current page (passed from controller)
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function searchSiteBack($string, $currentPage = 1, $limit) {
        // Getting all records from post by category. Returns array.
        $query = $this->createQueryBuilder('u')
                ->where('u.seoTitle LIKE :string OR u.title LIKE :string')
                ->setParameter('string', '%' . $string . '%')
                ->orderBy('u.id', 'DESC')
                ->getQuery();
        $paginator = $this->paginate($query, $currentPage);

        return $paginator;
    }

    /**
     *
     *   
     * @param integer            $page  
     * @param integer            $limit 
     *
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function paginate($dql, $page = 1, $limit = 10) {
        $paginator = new Paginator($dql);
        $paginator->setUseOutputWalkers(false);
        //$paginator->setUseOutputWalkers(false);
        
     
        $paginator->getQuery()
                ->setFirstResult($limit * ($page - 1)) 
                ->setMaxResults($limit); // Limit

        return $paginator;
    }

    /**
     * Get posts by category for front/nav-back  dropdown
     * @param integer $currentPage The current page (passed from nav-back)
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     */
    public function getPostsByCategoryBack($id, $currentPage = 1, $limit) {
        
        $query = $this->createQueryBuilder('u')
                        ->where('u.category = :id')
                        ->setParameter('id', $id)
                        ->orderBy('u.id', 'DESC')
                        ->getQuery();
        $paginator = $this->paginate($query, $currentPage, $limit);

        return $paginator;
    }
}
